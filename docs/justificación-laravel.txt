<<üìÑ Documentaci√≥n Base del Proyecto Laravel>>
üß± Estructura Base de Laravel
Al instalar Laravel con:
composer create-project laravel/laravel nombre-proyecto
Laravel genera una estructura base organizada en carpetas, que permite seguir el patr√≥n MVC (Modelo-Vista-Controlador) 
y facilita el desarrollo escalable de aplicaciones web.

<<üìÅ Principales carpetas:>>
Carpeta	Prop√≥sito
app/	Contiene la l√≥gica de la aplicaci√≥n (Modelos, Controllers).
bootstrap/	Archivos de arranque (bootstrap app).
config/	Archivos de configuraci√≥n de la app.
database/	Migraciones, factories y seeds.
public/	Punto de entrada HTTP (index.php) y recursos p√∫blicos.
resources/	Vistas Blade, archivos Tailwind/CSS, JS, etc.
routes/	Definici√≥n de rutas web y API.
storage/	Archivos temporales, logs, cach√©, etc.
tests/	Pruebas unitarias y funcionales.
vendor/	Librer√≠as instaladas con Composer.

<<üöÄ Starter Kits prehechos>>
Laravel ofrece opciones prearmadas para acelerar el desarrollo con funcionalidades comunes como login, registro, roles, etc. Estas se llaman starter kits, y los principales son:

Starter Kit	¬øQu√© incluye?	Complejidad
Laravel Breeze	Login, registro, sesiones (simple).	B√°sica
Laravel Jetstream	Login, equipos, 2FA, sesiones, API.	Media/Alta
Laravel UI	Login cl√°sico con Bootstrap/jQuery.	B√°sica
Laravel AdminLTE	Plantilla de panel de control prehecha.	Media

<<üìå Nota importante:>>
En este proyecto, no est√°s usando ning√∫n starter kit prehecho como Breeze o Jetstream. Esto se deduce porque en el archivo composer.json no est√°n presentes en la secci√≥n "require-dev".

Esto significa que est√°s trabajando sobre una estructura base limpia de Laravel, lo cual es ideal para aprender a construir cada parte del sistema manualmente.

<<üõ† Herramientas instaladas en el proyecto (require-dev)
Laravel ya viene con varias herramientas de desarrollo listas para usar, que est√°n en tu composer.json bajo la clave "require-dev":

<<üîß Herramientas explicadas:>>
Paquete	Funci√≥n
fakerphp/faker	Genera datos falsos para testing o seeds.
laravel/pail	Muestra logs en vivo desde la terminal (solo funciona en Linux).
laravel/pint	Formatea el c√≥digo PHP autom√°ticamente (estilo PSR-12).
laravel/sail	Entorno de desarrollo Dockerizado (para usar Laravel sin XAMPP).
mockery/mockery	Permite simular clases en pruebas (mocking).
nunomaduro/collision	Muestra errores m√°s legibles en consola (debug).
pestphp/pest	Framework moderno de testing, m√°s limpio que PHPUnit.
pestphp/pest-plugin-laravel	Integra Pest con Laravel (rutas, DB, etc.).

‚ö†Ô∏è Nota sobre Pail:
La herramienta laravel/pail requiere la extensi√≥n pcntl, que no est√° disponible en Windows. Por eso, al ejecutarla desde Windows aparece este error:
The [pcntl] extension is required to run Pail.
En Windows pod√©s simplemente ignorar esta herramienta o usar Laravel desde WSL2 o Sail (Docker) si necesit√°s compatibilidad total.

<<üìö Conclusi√≥n>>
Est√°s trabajando con una instalaci√≥n base de Laravel, sin kits prearmados.

Laravel ya incluye herramientas √∫tiles para facilitar el desarrollo y las pruebas.

Ten√©s control total sobre la estructura y pod√©s aprender Laravel desde sus fundamentos.